{"version":3,"sources":["Components/UI/FormInfo/FormInfo.js","Components/Pages/Auth/SignIn/SignIn.js","Components/Pages/Auth/SignUp/SignUp.js","Components/Pages/Auth/Auth.js"],"names":["FormInfo","props","classes","className","join","style","color","info","connect","dispatch","loginSuccess","token","userType","useState","email","password","formData","setFormData","error","setError","loading","setLoading","changeHandler","event","target","name","value","prev","useDispatch","push","useHistory","schema","displayName","type","onChange","required","src","require","onSubmit","preventDefault","axiosInstance","post","then","res","console","log","status","setCookie","a","data","expires","Date","toUTCString","setTimeout","setToken","catch","err","response","undefined","deleteCookie","message","autoComplete","map","el","index","key","id","htmlFor","disabled","every","trim","SmallSpinner","state","login","temporaryToken","loginSuccessful","setVerified","formInfo","setFormInfo","confirmPassword","setConfirmPassword","history","toLowerCase","verified","useEffect","localStorage","removeItem","path","match","url","component","SignUp","SignIn","to"],"mappings":"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","file":"static/js/9.d9d935c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FormInfo.css\";\r\n\r\nconst FormInfo = (props) => {\r\n  let classes = [\"info\", props.className ? props.className : \"\"];\r\n  return (\r\n    <div className={classes.join(\" \")}>\r\n      <p\r\n        className=\"small text-center remove-para-margin\"\r\n        style={{ color: props.color ? props.color : \"coral\" }}\r\n      >\r\n        {props.info}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormInfo;\r\n","import React, { useState } from \"react\";\r\nimport EachField from \"../../../UI/FormField/FormField\";\r\nimport MyCard from \"../../../UI/MyCard/MyCard\";\r\nimport \"./SignIn.css\";\r\nimport FormInfo from \"../../../UI/FormInfo/FormInfo\";\r\nimport { loginSuccess } from \"../../../Store/actions\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport AsyncButton from \"../../../UI/AsyncButton/AsyncButton\";\r\nimport { deleteCookie, setCookie } from \"../../../Utility/cookies\";\r\nimport { axiosInstance } from \"../../../Utility/axiosInstance\";\r\nimport SmallSpinner from \"../../../UI/SmallSpinner/SmallSpinner\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst SignIn = (props) => {\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [error, setError] = useState(\" \");\r\n  const [loading, setLoading] = useState(false);\r\n  const changeHandler = (event) => {\r\n    const { name, value } = event.target;\r\n    setError(\" \");\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  const dispatch = useDispatch();\r\n  const { push } = useHistory();\r\n\r\n  const valid = () => {\r\n    let requiredFields = [formData.email, formData.password];\r\n    return requiredFields.every((el) => el.trim() !== \"\");\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    axiosInstance\r\n      .post(\"/login\", formData)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.status === 200) {\r\n          setCookie(\"email\", formData.email);\r\n          setCookie(\"password\", formData.password);\r\n          const setToken = async () => {\r\n            await setCookie(\"token\", res.data.token, {\r\n              expires: new Date(3030, 0, 1).toUTCString(),\r\n            });\r\n            console.log(new Date(3030, 0, 1).toUTCString());\r\n            setTimeout(() => {\r\n              // window.location.reload();\r\n              dispatch(loginSuccess(res.data.token, res.data));\r\n              push(\"/clinics\");\r\n            }, 100);\r\n          };\r\n          setToken();\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        if (err.response !== null && err.response !== undefined) {\r\n          if (err.response.status === 401) {\r\n            deleteCookie(\"token\");\r\n            setError(\"Incorrect Email / Password\");\r\n          } else {\r\n            setError(err.response.message || \"Something went wrong\");\r\n          }\r\n        } else {\r\n          setError(\"Something went wrong\");\r\n        }\r\n      });\r\n  };\r\n\r\n  var schema = [\r\n    {\r\n      name: \"email\",\r\n      displayName: \"Email\",\r\n      // placeholder: \"Enter Email\",\r\n      className: \"signup__input\",\r\n      type: \"text\",\r\n      value: formData.email,\r\n      onChange: changeHandler,\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"password\",\r\n      className: \"signup__input\",\r\n      displayName: \"Password\",\r\n      // placeholder: \"Enter Password\",\r\n      type: \"password\",\r\n      value: formData.password,\r\n      onChange: changeHandler,\r\n      required: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"signup-container full-page-wrapper flex-column\">\r\n      <img\r\n        src={require(\"../../../../assets/images/EZWalkin-Logo.jpg\")}\r\n        className=\"auth-page-logo\"\r\n      />\r\n      <form\r\n        className=\"signup blurred-box\"\r\n        onSubmit={submitHandler}\r\n        autoComplete=\"off\"\r\n      >\r\n        <h3>Sign in</h3>\r\n        <FormInfo info={error} />\r\n        {schema.map((el, index) => (\r\n          <div key={index} className=\"signup__field\">\r\n            <input {...el} id={el.name} />\r\n            <label className=\"signup__label\" htmlFor={el.name}>\r\n              {el.displayName}\r\n            </label>\r\n          </div>\r\n        ))}\r\n        {/* <div className=\"signup__field\">\r\n          <input\r\n            className=\"signup__input\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            required\r\n          />\r\n          <label className=\"signup__label\" htmlFor=\"username\">\r\n            Username\r\n          </label>\r\n        </div>\r\n        <div className=\"signup__field\">\r\n          <input\r\n            className=\"signup__input\"\r\n            type=\"text\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            required\r\n          />\r\n          <label className=\"signup__label\" htmlFor=\"email\">\r\n            Email\r\n          </label>\r\n        </div>\r\n        <div className=\"signup__field\">\r\n          <input\r\n            className=\"signup__input\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            required\r\n          />\r\n          <label className=\"signup__label\" htmlFor=\"password\">\r\n            Password\r\n          </label>\r\n        </div> */}\r\n        <button disabled={!valid()} type=\"submit\">\r\n          {loading ? <SmallSpinner /> : \"Sign in\"}\r\n        </button>\r\n      </form>\r\n      {/* <MyCard className=\"signup-form\" title=\"LOGIN TO YOUR ACCOUNT\" titleCenter>\r\n        <FormInfo info={error} />\r\n        <form onSubmit={submitHandler}>\r\n          {schema.map((el, index) => (\r\n            <EachField key={index} {...el} />\r\n          ))}\r\n          <AsyncButton\r\n            disabled={!valid()}\r\n            className=\"bg-green lg box-shadow-none\"\r\n            type=\"submit\"\r\n            loading={loading}\r\n            // loading\r\n          >\r\n            Login\r\n          </AsyncButton>\r\n        </form>\r\n      </MyCard> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loginSuccess: (token, userType) => dispatch(loginSuccess(token, userType)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n","import React, { useState } from \"react\";\r\nimport EachField from \"../../../UI/FormField/FormField\";\r\nimport MyCard from \"../../../UI/MyCard/MyCard\";\r\nimport \"./SignUp.css\";\r\n// import SmallSpinner from \"../../../UI/SmallSpinner/SmallSpinner\";\r\nimport FormInfo from \"../../../UI/FormInfo/FormInfo\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginSuccess, setVerified } from \"../../../Store/actions\";\r\nimport AsyncButton from \"../../../UI/AsyncButton/AsyncButton\";\r\nimport { axiosInstance } from \"../../../Utility/axiosInstance\";\r\nimport SmallSpinner from \"../../../UI/SmallSpinner/SmallSpinner\";\r\n\r\nconst SignUp = (props) => {\r\n  const [formData, setFormData] = useState({\r\n    email: props.email,\r\n    password: \"\",\r\n  });\r\n  const [formInfo, setFormInfo] = useState(\" \");\r\n  const [loading, setLoading] = useState(false);\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const changeHandler = (event) => {\r\n    setFormInfo(\" \");\r\n    const { name, value } = event.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const confirmPasswordChangeHandler = (event) => {\r\n    setConfirmPassword(event.target.value);\r\n  };\r\n\r\n  const valid = () => {\r\n    let requiredFields = [props.email, formData.password, confirmPassword];\r\n    return (\r\n      requiredFields.every((el) => el.trim() !== \"\") &&\r\n      formData.password === confirmPassword\r\n    );\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    axiosInstance\r\n      .post(\"/giri/project\", { ...formData, token: props.token })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.status === 200) {\r\n          props.setVerified(false);\r\n          props.history.push(\"/auth\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        setFormInfo(\"Something went wrong !\");\r\n      });\r\n  };\r\n\r\n  var schema = [\r\n    {\r\n      name: \"password\",\r\n      className: \"signup__input\",\r\n      displayName: \"Password\",\r\n      // placeholder: \"Enter Password\",\r\n      type: \"password\",\r\n      value: formData.password,\r\n      onChange: changeHandler,\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"confirmPassword\",\r\n      className: \"signup__input\",\r\n      displayName: \"Confirm Password\",\r\n      // placeholder: \"Confirm Password\",\r\n      type: \"password\",\r\n      value: confirmPassword,\r\n      onChange: confirmPasswordChangeHandler,\r\n      required: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"signup-container full-page-wrapper flex-column auth-background\">\r\n      <img\r\n        src={require(\"../../../../assets/images/EZWalkin-Logo.jpg\")}\r\n        className=\"main-logo auth-page-logo\"\r\n      />\r\n      {/* <MyCard\r\n        className=\"signup-form\"\r\n        title={\"Create Your Account For \" + props.email}\r\n        titleCenter\r\n      > */}\r\n      <form className=\"signup blurred-box\" onSubmit={submitHandler}>\r\n        <h3>Create Your Account For {props.email.toLowerCase()}</h3>\r\n        {formData.password !== confirmPassword ? (\r\n          <FormInfo info=\"Password Not Equal !\" />\r\n        ) : (\r\n          <FormInfo info={formInfo} />\r\n        )}\r\n        {schema.map((el, index) => (\r\n          <div key={index} className=\"signup__field\">\r\n            <input {...el} id={el.name} />\r\n            <label className=\"signup__label\" htmlFor={el.name}>\r\n              {el.displayName}\r\n            </label>\r\n          </div>\r\n        ))}\r\n        <button disabled={!valid()} type=\"submit\">\r\n          {loading ? <SmallSpinner /> : \"Create\"}\r\n        </button>\r\n        {/* {schema.map((el, index) => (\r\n            <EachField key={index} {...el} />\r\n          ))}\r\n          {formData.password !== confirmPassword ? (\r\n            <FormInfo info=\"Password Not Equal !\" />\r\n          ) : (\r\n            <FormInfo info={formInfo} />\r\n          )}\r\n          <AsyncButton\r\n            disabled={!valid()}\r\n            className=\"bg-green lg box-shadow-none\"\r\n            type=\"submit\"\r\n            loading={loading}\r\n          >\r\n            Create\r\n          </AsyncButton> */}\r\n      </form>\r\n      {/* </MyCard> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loginSuccessful: (token, userType) =>\r\n      dispatch(loginSuccess(token, userType)),\r\n    setVerified: (status) => dispatch(setVerified(status)),\r\n  };\r\n};\r\n\r\nconst matchStateToProps = (state) => {\r\n  return {\r\n    token: state.login.temporaryToken,\r\n    email: state.login.email,\r\n  };\r\n};\r\n\r\nexport default connect(matchStateToProps, mapDispatchToProps)(SignUp);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\nimport \"./Auth.css\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\nimport SignUp from \"./SignUp/SignUp\";\r\n\r\nconst Auth = (props) => {\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"route\");\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        {props.verified ? (\r\n          <Route path={props.match.url + \"/signup\"} component={SignUp} />\r\n        ) : (\r\n          <Route path={props.match.url + \"/signin\"} component={SignIn} />\r\n        )}\r\n        {props.verified ? (\r\n          <Redirect to=\"/auth/signup\" />\r\n        ) : (\r\n          <Redirect to=\"/auth/signin\" />\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    verified: state.login.verified,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Auth);\r\n\r\n// http://localhost:3000/auth/verifytoken/verify?token=dl9tcxk6tzlwnrjd\r\n"],"sourceRoot":""}