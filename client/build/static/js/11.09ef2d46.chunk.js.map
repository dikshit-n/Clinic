{"version":3,"sources":["Components/UI/MyCard/MyCard.js","Components/UI/Date/Date.js","Components/UI/Select/Select.js","Components/UI/FormField/FormField.js","Components/UI/FormInfo/FormInfo.js","Components/Pages/Auth/SignIn/SignIn.js","Components/Pages/Auth/SignUp/SignUp.js","Components/Pages/Auth/Auth.js"],"names":["MyCard","props","classNames","className","join","style","title","titleStyle","textAlign","titleCenter","children","DateInput","useState","value","startDate","setStartDate","placeholderText","placeholder","dateFormat","selected","onChange","date","target","name","SelectInput","classNamePrefix","ref","undefined","length","label","styles","control","background","options","map","el","EachField","id","uniqueid","type","FormGroup","Label","for","displayName","addon","InputGroup","InputGroupAddon","addonType","InputGroupText","text","Input","disabled","event","required","readOnly","Select","getFormField","FormInfo","classes","color","info","connect","dispatch","loginSuccess","token","userType","email","password","formData","setFormData","error","setError","loading","setLoading","changeHandler","prev","schema","src","require","onSubmit","preventDefault","axiosInstance","post","then","res","console","log","status","a","setCookie","data","expires","Date","toUTCString","setTimeout","window","location","reload","setToken","catch","err","response","deleteCookie","message","autoComplete","index","key","htmlFor","every","trim","SmallSpinner","state","login","temporaryToken","loginSuccessful","setVerified","formInfo","setFormInfo","confirmPassword","setConfirmPassword","history","push","toLowerCase","verified","useEffect","localStorage","removeItem","path","match","url","component","SignUp","SignIn","to"],"mappings":"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","file":"static/js/11.09ef2d46.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { CardTitle } from \"reactstrap\";\r\nimport \"./MyCard.css\";\r\n\r\nconst MyCard = (props) => {\r\n  let classNames = [\"my-card\", props.className ? props.className : \"\"];\r\n  return (\r\n    <div className={classNames.join(\" \")} style={props.style}>\r\n      {props.title ? (\r\n        <Fragment>\r\n          <CardTitle>\r\n            <h4\r\n              className=\"card-title-responsive\"\r\n              style={{\r\n                ...props.titleStyle,\r\n                textAlign: props.titleCenter ? \"center\" : \"left\",\r\n              }}\r\n            >\r\n              {props.title}\r\n            </h4>\r\n          </CardTitle>\r\n        </Fragment>\r\n      ) : null}\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCard;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"./Date.css\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// CSS Modules, react-datepicker-cssmodules.css\r\n// import 'react-datepicker/dist/react-datepicker-cssmodules.css';\r\n\r\nconst DateInput = (props) => {\r\n  const [startDate, setStartDate] = useState(props.value);\r\n\r\n  return (\r\n    <Fragment>\r\n      <br />\r\n      <DatePicker\r\n        {...props}\r\n        placeholderText={props.placeholder}\r\n        className=\"date\"\r\n        dateFormat=\"dd-MM-yyyy\"\r\n        selected={startDate}\r\n        onChange={(date) => {\r\n          setStartDate(date);\r\n          props.onChange({\r\n            target: {\r\n              value: date,\r\n              name: props.name,\r\n            },\r\n          });\r\n        }}\r\n        // calendarClassName=\"rasta-stripes\"\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DateInput;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst SelectInput = (props) => {\r\n  return (\r\n    <Select\r\n      className=\"react-select\"\r\n      classNamePrefix=\"react-select\"\r\n      placeholder={props.placeholder}\r\n      ref={props.ref}\r\n      value={\r\n        props.value !== undefined && props.value !== null\r\n          ? props.value.length === 0\r\n            ? null\r\n            : { value: props.value, label: props.value }\r\n          : null\r\n      }\r\n      onChange={(value) =>\r\n        props.onChange(\r\n          value !== null && value !== undefined ? value.label : null,\r\n          props.name\r\n        )\r\n      }\r\n      name={props.name}\r\n      styles={{\r\n        control: (styles) => ({\r\n          background: \"rgba(230, 230, 230, 0.823)\",\r\n          ...styles,\r\n          ...props.style,\r\n        }),\r\n      }}\r\n      options={\r\n        props.options === null\r\n          ? []\r\n          : [...props.options.map((el) => ({ value: el, label: el }))]\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React from \"react\";\r\nimport {\r\n  FormGroup,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport uniqueid from \"uniqid\";\r\nimport DateInput from \"../Date/Date\";\r\n\r\nimport Select from \"../Select/Select\";\r\n\r\nconst EachField = (props) => {\r\n  let id = uniqueid();\r\n  const getFormField = () => {\r\n    switch (props.type) {\r\n      case \"text\":\r\n        return (\r\n          <FormGroup style={{ textAlign: \"left\" }}>\r\n            <Label for={id}>{props.displayName}</Label>\r\n            {props.addon ? (\r\n              <InputGroup>\r\n                <InputGroupAddon addonType={props.addon.type}>\r\n                  <InputGroupText>{props.addon.text}</InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input\r\n                  disabled={props.disabled}\r\n                  type={props.type}\r\n                  id={id}\r\n                  name={props.name}\r\n                  value={props.value}\r\n                  onChange={(event) => {\r\n                    props.onChange(event);\r\n                  }}\r\n                  placeholder={props.placeholder}\r\n                  required={props.required}\r\n                  readOnly={props.readOnly}\r\n                  {...props}\r\n                />\r\n              </InputGroup>\r\n            ) : (\r\n              <Input\r\n                disabled={props.disabled}\r\n                type={props.type}\r\n                id={id}\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={(event) => {\r\n                  props.onChange(event);\r\n                }}\r\n                placeholder={props.placeholder}\r\n                required={props.required}\r\n                readOnly={props.readOnly}\r\n                {...props}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      case \"textarea\":\r\n        return (\r\n          <FormGroup style={{ textAlign: \"left\" }}>\r\n            <Label for={id}>{props.displayName}</Label>\r\n            {props.addon ? (\r\n              <InputGroup>\r\n                <InputGroupAddon addonType={props.addon.type}>\r\n                  <InputGroupText>{props.addon.text}</InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input\r\n                  disabled={props.disabled}\r\n                  type={props.type}\r\n                  id={id}\r\n                  value={props.value}\r\n                  onChange={(event) => {\r\n                    props.onChange(event);\r\n                  }}\r\n                  name={props.name}\r\n                  placeholder={props.placeholder}\r\n                  required={props.required}\r\n                  readOnly={props.readOnly}\r\n                  {...props}\r\n                />\r\n              </InputGroup>\r\n            ) : (\r\n              <Input\r\n                disabled={props.disabled}\r\n                type={props.type}\r\n                id={id}\r\n                value={props.value}\r\n                onChange={(event) => {\r\n                  props.onChange(event);\r\n                }}\r\n                name={props.name}\r\n                placeholder={props.placeholder}\r\n                required={props.required}\r\n                readOnly={props.readOnly}\r\n                {...props}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      case \"select\":\r\n        return (\r\n          <FormGroup style={{ textAlign: \"left\" }}>\r\n            <Label for={id}>{props.displayName}</Label>\r\n            {props.addon ? (\r\n              <InputGroup>\r\n                <InputGroupAddon addonType={props.addon.type}>\r\n                  <InputGroupText>{props.addon.text}</InputGroupText>\r\n                </InputGroupAddon>\r\n                <Select\r\n                  style={{ background: \"#fafafa\" }}\r\n                  name={props.name}\r\n                  value={props.value}\r\n                  onChange={(value, name) => {\r\n                    props.onChange(value, name);\r\n                  }}\r\n                  options={props.options}\r\n                  {...props}\r\n                />\r\n              </InputGroup>\r\n            ) : (\r\n              <Select\r\n                style={{ background: \"#fafafa\" }}\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={(value, name) => {\r\n                  props.onChange(value, name);\r\n                }}\r\n                options={props.options}\r\n                {...props}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      case \"number\":\r\n        return (\r\n          <FormGroup style={{ textAlign: \"left\" }}>\r\n            <Label for={id}>{props.displayName}</Label>\r\n            {props.addon ? (\r\n              <InputGroup>\r\n                <InputGroupAddon addonType={props.addon.type}>\r\n                  <InputGroupText>{props.addon.text}</InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input\r\n                  disabled={props.disabled}\r\n                  type={props.type}\r\n                  id={id}\r\n                  value={props.value}\r\n                  onChange={(event) => {\r\n                    props.onChange(event);\r\n                  }}\r\n                  name={props.name}\r\n                  placeholder={props.placeholder}\r\n                  required={props.required}\r\n                  readOnly={props.readOnly}\r\n                  {...props}\r\n                />\r\n              </InputGroup>\r\n            ) : (\r\n              <Input\r\n                disabled={props.disabled}\r\n                type={props.type}\r\n                id={id}\r\n                value={props.value}\r\n                onChange={(event) => {\r\n                  props.onChange(event);\r\n                }}\r\n                name={props.name}\r\n                placeholder={props.placeholder}\r\n                required={props.required}\r\n                readOnly={props.readOnly}\r\n                {...props}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        );\r\n\r\n      case \"date\":\r\n        return (\r\n          <FormGroup style={{ textAlign: \"left\" }}>\r\n            <Label for={id}>{props.displayName}</Label>\r\n            {props.addon ? (\r\n              <InputGroup>\r\n                <InputGroupAddon addonType={props.addon.type}>\r\n                  <InputGroupText>{props.addon.text}</InputGroupText>\r\n                </InputGroupAddon>\r\n                <DateInput\r\n                  disabled={props.disabled}\r\n                  type={props.type}\r\n                  id={id}\r\n                  value={props.value}\r\n                  onChange={(event) => {\r\n                    props.onChange(event);\r\n                  }}\r\n                  name={props.name}\r\n                  placeholder={props.placeholder}\r\n                  required={props.required}\r\n                  readOnly={props.readOnly}\r\n                  {...props}\r\n                />\r\n              </InputGroup>\r\n            ) : (\r\n              <DateInput\r\n                disabled={props.disabled}\r\n                type={props.type}\r\n                id={id}\r\n                value={props.value}\r\n                onChange={(event) => {\r\n                  props.onChange(event);\r\n                }}\r\n                name={props.name}\r\n                placeholder={props.placeholder}\r\n                required={props.required}\r\n                readOnly={props.readOnly}\r\n                {...props}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      default:\r\n        return (\r\n          <FormGroup style={{ textAlign: \"left\" }}>\r\n            <Label for={id}>{props.displayName}</Label>\r\n            {props.addon ? (\r\n              <InputGroup>\r\n                <InputGroupAddon addonType={props.addon.type}>\r\n                  <InputGroupText>{props.addon.text}</InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input\r\n                  disabled={props.disabled}\r\n                  type={props.type}\r\n                  id={id}\r\n                  name={props.name}\r\n                  value={props.value}\r\n                  onChange={(event) => {\r\n                    props.onChange(event);\r\n                  }}\r\n                  placeholder={props.placeholder}\r\n                  required={props.required}\r\n                  readOnly={props.readOnly}\r\n                  {...props}\r\n                />\r\n              </InputGroup>\r\n            ) : (\r\n              <Input\r\n                disabled={props.disabled}\r\n                type={props.type}\r\n                id={id}\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={(event) => {\r\n                  props.onChange(event);\r\n                }}\r\n                placeholder={props.placeholder}\r\n                required={props.required}\r\n                readOnly={props.readOnly}\r\n                {...props}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        );\r\n    }\r\n  };\r\n  return getFormField();\r\n};\r\n\r\nexport default EachField;\r\n\r\n// const changeHandler = (event) => {\r\n//   const { name, value } = event.target;\r\n//   setFormData((prev) => ({\r\n//     ...prev,\r\n//     [name]: value,\r\n//   }));\r\n// };\r\n\r\n// const selectChangeHandler = (value, name) => {\r\n//   setFormData((prev) => ({\r\n//     ...prev,\r\n//     [name]: value,\r\n//   }));\r\n// };\r\n\r\n// var schema = [\r\n//   {\r\n//     name: \"name\",\r\n//     displayName: \"Name\",\r\n//     placeholder: \"Enter Name\",\r\n//     type: \"text\",\r\n//     value: formData.name,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"address\",\r\n//     displayName: \"Address\",\r\n//     placeholder: \"Enter Address\",\r\n//     type: \"textarea\",\r\n//     value: formData.address,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"country\",\r\n//     displayName: \"Country\",\r\n//     placeholder: \"Enter Country\",\r\n//     type: \"select\",\r\n//     value: formData.country,\r\n//     onChange: selectChangeHandler,\r\n//     options: [\"India\", \"Japan\"],\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"email\",\r\n//     displayName: \"Email\",\r\n//     placeholder: \"Enter Email\",\r\n//     type: \"email\",\r\n//     value: formData.email,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"contactPerson\",\r\n//     displayName: \"Contact Person\",\r\n//     placeholder: \"Enter Contact Person\",\r\n//     type: \"text\",\r\n//     value: formData.contactPerson,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"contactNumber\",\r\n//     displayName: \"Contact Number\",\r\n//     placeholder: \"Enter Contact Number\",\r\n//     type: \"number\",\r\n//     value: formData.contactNumber,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"latitude\",\r\n//     type: \"number\",\r\n//     displayName: \"Latitude\",\r\n//     placeholder: \"Enter Latitude\",\r\n//     value: formData.latitude,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n//   {\r\n//     name: \"longitude\",\r\n//     type: \"number\",\r\n//     displayName: \"Longitude\",\r\n//     placeholder: \"Enter Longitude\",\r\n//     value: formData.longitude,\r\n//     onChange: changeHandler,\r\n//     required: true,\r\n//   },\r\n// ];\r\n","import React from \"react\";\r\nimport \"./FormInfo.css\";\r\n\r\nconst FormInfo = (props) => {\r\n  let classes = [\"info\", props.className ? props.className : \"\"];\r\n  return (\r\n    <div className={classes.join(\" \")}>\r\n      <p\r\n        className=\"small text-center remove-para-margin\"\r\n        style={{ color: props.color ? props.color : \"coral\" }}\r\n      >\r\n        {props.info}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormInfo;\r\n","import React, { useState } from \"react\";\r\nimport EachField from \"../../../UI/FormField/FormField\";\r\nimport MyCard from \"../../../UI/MyCard/MyCard\";\r\nimport \"./SignIn.css\";\r\nimport FormInfo from \"../../../UI/FormInfo/FormInfo\";\r\nimport { loginSuccess } from \"../../../Store/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport AsyncButton from \"../../../UI/AsyncButton/AsyncButton\";\r\nimport { deleteCookie, setCookie } from \"../../../Utility/cookies\";\r\nimport { axiosInstance } from \"../../../Utility/axiosInstance\";\r\nimport SmallSpinner from \"../../../UI/SmallSpinner/SmallSpinner\";\r\n\r\nconst SignIn = (props) => {\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [error, setError] = useState(\" \");\r\n  const [loading, setLoading] = useState(false);\r\n  const changeHandler = (event) => {\r\n    const { name, value } = event.target;\r\n    setError(\" \");\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const valid = () => {\r\n    let requiredFields = [formData.email, formData.password];\r\n    return requiredFields.every((el) => el.trim() !== \"\");\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    axiosInstance\r\n      .post(\"/login\", formData)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.status === 200) {\r\n          const setToken = async () => {\r\n            await setCookie(\"token\", res.data.token, {\r\n              expires: new Date(3030, 0, 1).toUTCString(),\r\n            });\r\n            console.log(new Date(3030, 0, 1).toUTCString());\r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 100);\r\n          };\r\n          setToken();\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        if (err.response !== null && err.response !== undefined) {\r\n          if (err.response.status === 401) {\r\n            deleteCookie(\"token\");\r\n            setError(\"Incorrect Email / Password\");\r\n          } else {\r\n            setError(err.response.message || \"Something went wrong\");\r\n          }\r\n        } else {\r\n          setError(\"Something went wrong\");\r\n        }\r\n      });\r\n  };\r\n\r\n  var schema = [\r\n    {\r\n      name: \"email\",\r\n      displayName: \"Email\",\r\n      // placeholder: \"Enter Email\",\r\n      className: \"signup__input\",\r\n      type: \"text\",\r\n      value: formData.email,\r\n      onChange: changeHandler,\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"password\",\r\n      className: \"signup__input\",\r\n      displayName: \"Password\",\r\n      // placeholder: \"Enter Password\",\r\n      type: \"password\",\r\n      value: formData.password,\r\n      onChange: changeHandler,\r\n      required: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"signup-container full-page-wrapper flex-column\">\r\n      <img\r\n        src={require(\"../../../../assets/images/EZWalkin-Logo.jpg\")}\r\n        className=\"auth-page-logo\"\r\n      />\r\n      <form\r\n        className=\"signup blurred-box\"\r\n        onSubmit={submitHandler}\r\n        autoComplete=\"off\"\r\n      >\r\n        <h3>Sign in</h3>\r\n        <FormInfo info={error} />\r\n        {schema.map((el, index) => (\r\n          <div key={index} className=\"signup__field\">\r\n            <input {...el} id={el.name} />\r\n            <label className=\"signup__label\" htmlFor={el.name}>\r\n              {el.displayName}\r\n            </label>\r\n          </div>\r\n        ))}\r\n        {/* <div className=\"signup__field\">\r\n          <input\r\n            className=\"signup__input\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            required\r\n          />\r\n          <label className=\"signup__label\" htmlFor=\"username\">\r\n            Username\r\n          </label>\r\n        </div>\r\n        <div className=\"signup__field\">\r\n          <input\r\n            className=\"signup__input\"\r\n            type=\"text\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            required\r\n          />\r\n          <label className=\"signup__label\" htmlFor=\"email\">\r\n            Email\r\n          </label>\r\n        </div>\r\n        <div className=\"signup__field\">\r\n          <input\r\n            className=\"signup__input\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            required\r\n          />\r\n          <label className=\"signup__label\" htmlFor=\"password\">\r\n            Password\r\n          </label>\r\n        </div> */}\r\n        <button disabled={!valid()} type=\"submit\">\r\n          {loading ? <SmallSpinner /> : \"Sign in\"}\r\n        </button>\r\n      </form>\r\n      {/* <MyCard className=\"signup-form\" title=\"LOGIN TO YOUR ACCOUNT\" titleCenter>\r\n        <FormInfo info={error} />\r\n        <form onSubmit={submitHandler}>\r\n          {schema.map((el, index) => (\r\n            <EachField key={index} {...el} />\r\n          ))}\r\n          <AsyncButton\r\n            disabled={!valid()}\r\n            className=\"bg-green lg box-shadow-none\"\r\n            type=\"submit\"\r\n            loading={loading}\r\n            // loading\r\n          >\r\n            Login\r\n          </AsyncButton>\r\n        </form>\r\n      </MyCard> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loginSuccess: (token, userType) => dispatch(loginSuccess(token, userType)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n","import React, { useState } from \"react\";\r\nimport EachField from \"../../../UI/FormField/FormField\";\r\nimport MyCard from \"../../../UI/MyCard/MyCard\";\r\nimport \"./SignUp.css\";\r\n// import SmallSpinner from \"../../../UI/SmallSpinner/SmallSpinner\";\r\nimport FormInfo from \"../../../UI/FormInfo/FormInfo\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginSuccess, setVerified } from \"../../../Store/actions\";\r\nimport AsyncButton from \"../../../UI/AsyncButton/AsyncButton\";\r\nimport { axiosInstance } from \"../../../Utility/axiosInstance\";\r\nimport SmallSpinner from \"../../../UI/SmallSpinner/SmallSpinner\";\r\n\r\nconst SignUp = (props) => {\r\n  const [formData, setFormData] = useState({\r\n    email: props.email,\r\n    password: \"\",\r\n  });\r\n  const [formInfo, setFormInfo] = useState(\" \");\r\n  const [loading, setLoading] = useState(false);\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const changeHandler = (event) => {\r\n    setFormInfo(\" \");\r\n    const { name, value } = event.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const confirmPasswordChangeHandler = (event) => {\r\n    setConfirmPassword(event.target.value);\r\n  };\r\n\r\n  const valid = () => {\r\n    let requiredFields = [props.email, formData.password, confirmPassword];\r\n    return (\r\n      requiredFields.every((el) => el.trim() !== \"\") &&\r\n      formData.password === confirmPassword\r\n    );\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    axiosInstance\r\n      .post(\"/createaccount\", { ...formData, token: props.token })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.status === 200) {\r\n          props.setVerified(false);\r\n          props.history.push(\"/auth\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        setFormInfo(\"Something went wrong !\");\r\n      });\r\n  };\r\n\r\n  var schema = [\r\n    {\r\n      name: \"password\",\r\n      className: \"signup__input\",\r\n      displayName: \"Password\",\r\n      // placeholder: \"Enter Password\",\r\n      type: \"password\",\r\n      value: formData.password,\r\n      onChange: changeHandler,\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"confirmPassword\",\r\n      className: \"signup__input\",\r\n      displayName: \"Confirm Password\",\r\n      // placeholder: \"Confirm Password\",\r\n      type: \"password\",\r\n      value: confirmPassword,\r\n      onChange: confirmPasswordChangeHandler,\r\n      required: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"signup-container full-page-wrapper flex-column auth-background\">\r\n      <img\r\n        src={require(\"../../../../assets/images/EZWalkin-Logo.jpg\")}\r\n        className=\"main-logo auth-page-logo\"\r\n      />\r\n      {/* <MyCard\r\n        className=\"signup-form\"\r\n        title={\"Create Your Account For \" + props.email}\r\n        titleCenter\r\n      > */}\r\n      <form className=\"signup blurred-box\" onSubmit={submitHandler}>\r\n        <h3>Create Your Account For {props.email.toLowerCase()}</h3>\r\n        {formData.password !== confirmPassword ? (\r\n          <FormInfo info=\"Password Not Equal !\" />\r\n        ) : (\r\n          <FormInfo info={formInfo} />\r\n        )}\r\n        {schema.map((el, index) => (\r\n          <div key={index} className=\"signup__field\">\r\n            <input {...el} id={el.name} />\r\n            <label className=\"signup__label\" htmlFor={el.name}>\r\n              {el.displayName}\r\n            </label>\r\n          </div>\r\n        ))}\r\n        <button disabled={!valid()} type=\"submit\">\r\n          {loading ? <SmallSpinner /> : \"Create\"}\r\n        </button>\r\n        {/* {schema.map((el, index) => (\r\n            <EachField key={index} {...el} />\r\n          ))}\r\n          {formData.password !== confirmPassword ? (\r\n            <FormInfo info=\"Password Not Equal !\" />\r\n          ) : (\r\n            <FormInfo info={formInfo} />\r\n          )}\r\n          <AsyncButton\r\n            disabled={!valid()}\r\n            className=\"bg-green lg box-shadow-none\"\r\n            type=\"submit\"\r\n            loading={loading}\r\n          >\r\n            Create\r\n          </AsyncButton> */}\r\n      </form>\r\n      {/* </MyCard> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loginSuccessful: (token, userType) =>\r\n      dispatch(loginSuccess(token, userType)),\r\n    setVerified: (status) => dispatch(setVerified(status)),\r\n  };\r\n};\r\n\r\nconst matchStateToProps = (state) => {\r\n  return {\r\n    token: state.login.temporaryToken,\r\n    email: state.login.email,\r\n  };\r\n};\r\n\r\nexport default connect(matchStateToProps, mapDispatchToProps)(SignUp);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\nimport PageShell from \"../../UI/PageShell/PageShell\";\r\nimport \"./Auth.css\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\nimport SignUp from \"./SignUp/SignUp\";\r\n\r\nconst Auth = (props) => {\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"route\");\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        {props.verified ? (\r\n          <Route path={props.match.url + \"/signup\"} component={SignUp} />\r\n        ) : (\r\n          <Route path={props.match.url + \"/signin\"} component={SignIn} />\r\n        )}\r\n        {props.verified ? (\r\n          <Redirect to=\"/auth/signup\" />\r\n        ) : (\r\n          <Redirect to=\"/auth/signin\" />\r\n        )}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    verified: state.login.verified,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Auth);\r\n\r\n// http://localhost:3000/auth/verifytoken/verify?token=dl9tcxk6tzlwnrjd\r\n"],"sourceRoot":""}